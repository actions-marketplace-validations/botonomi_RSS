<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
<title>Help Wanted</title>
<description>Help Wanted Issues</description>
<link>https://lbonanomi.github.io/workspace/feed.xml</link>
<item>	<title></title>
	<link>https://github.com/github/choosealicense.com/issues/904</link>
	<description><![CDATA[ <pre><p>Hello,</p>
<p>I see that this website uses pixel values on "application.scss" file. I suggest to convert pixel values used for fonts and spacing to relative fonts like "rem’" or "em". This will lead to accessibility of the site and rank higher on Google.</p>
<p>Thank you</p></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/choosealicense.com/issues/68</link>
	<description><![CDATA[ <pre><p>Would love to see about baking in I18N support to choosealicense.com proper. See #67 and #62</p>
<p>We already have the bulk of the strings in a single file (<code>_config.yml</code>), so it should just be a matter of abstracting out some of our variables, as far as I can tell.</p>
<p>Would love to take this on starting in August if there’s interest. Would be a great exercise to set a standard for Jekyll L10N, and can iterate on some of the lessons learned form https://github.com/CMSgov/healthcare.gov.</p>
<p><span class="citation" data-cites="parkr">@parkr</span> any interest?
<span class="citation" data-cites="dhcole">@dhcole</span> any insight / words of wisdom?</p></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/12760</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/12556</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/12012</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/11849</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/11784</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/11639</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/11491</link>
	<description><![CDATA[ <pre><h3 id="discussed-in-httpsgithub.comgithubdocsdiscussions11479">Discussed in https://github.com/github/docs/discussions/11479</h3>
<div type="discussions-op-text">
<p><sup>Originally posted by <strong>Andre601</strong> October 27, 2021</sup>
Just recently discovered that you can append <code>gh_color_mode=light</code> or <code>gh_color_mode=dark</code> to a githubusercontent.com hosted image to only show it while the user is using the respective mode.</p>
I feel like this should be mentioned in the docs somewhere, probably under the markdown syntax docs in the images section, so that people are aware of it.
</div></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/11237</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/11167</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/11129</link>
	<description><![CDATA[ <pre><h3 id="code-of-conduct">Code of Conduct</h3>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="" />
I have read and agree to the GitHub Docs project’s <a href="https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md">Code of Conduct</a></li>
</ul>
<h3 id="what-article-on-docs.github.com-is-affected">What article on docs.github.com is affected?</h3>
<p>https://docs.github.com/en/developers/webhooks-and-events/events/issue-event-types</p>
<h3 id="what-parts-of-the-article-would-you-like-to-see-updated">What part(s) of the article would you like to see updated?</h3>
<p>In the responses returned by the <em>Timeline events</em> and <em>Issue events</em> APIs for PRs that have been force-pushed, events of type <code>head_ref_force_pushed</code> can be found. However, this kind of event is not documented in the Issue event types page.</p>
<h3 id="additional-information">Additional information</h3>
<p><em>No response</em></p></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/11080</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/10967</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/10788</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/10188</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/9432</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/9403</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/9401</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/9240</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/8530</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/8419</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/8188</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/7573</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/7323</link>
	<description><![CDATA[ <pre><h3 id="what-article-on-docs.github.com-is-affected">What article on docs.github.com is affected?</h3>
<p>https://github.com/github/docs/blob/main/content/github/authenticating-to-github/managing-commit-signature-verification/signing-commits.md</p>
<h3 id="what-parts-of-the-article-would-you-like-to-see-updated">What part(s) of the article would you like to see updated?</h3>
<p>Near <code>To store your GPG key passphrase so you don't have to enter it every time you sign a commit, we recommend using the following tools:</code> add about Linux, how to configure <code>gpg-agent</code> (as I tried it will start automatically after first commit, without any configuration), and how to not enter passphrase even for the first time.</p></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/7044</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/6970</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/6969</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/6861</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/6793</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/6738</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/6693</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/6326</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/6289</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/6284</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/5993</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/5981</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/4760</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/4420</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/4033</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/2617</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/764</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/docs/issues/139</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/linguist/issues/3924</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/semantic/issues/233</link>
	<description><![CDATA[ <pre><p>As a Kotlin user, it would be benefical if semantic support Kotlin programming language.
https://kotlinlang.org/</p></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/semantic/issues/132</link>
	<description><![CDATA[ <pre><p>Any interest in supporting F#?</p>
<p>We have our own compiler APIs that enable all kinds of stuff based on structure and semantics; and it’s part of the compiler proper, not some janky thing that breaks because the compiler changed stuff. You can see this in the Fable REPL, which supports a wide range of tooling features in the editor: https://fable.io/repl/</p>
<p>Based on looking at how you do things, you wouldn’t be able to use this directly, which would imply a lot of work. F# syntax and semantic aren’t trivial 😅. But if there was a way to extend this to allow the existing tooling support (which can run in a browser!), then we might be able to prioritize stuff on the F# side of things to make it easier.</p></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/smimesign/issues/91</link>
	<description><![CDATA[ <pre><p>We build <code>amd64</code> directly: https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L89</p>
<p>But I had trouble figuring out how to build for <code>GOARCH=386</code> without errors. Right now, we use https://github.com/egor-tensin/setup-mingw to switch to 32-bit builds, which pulls down a bunch of tooling and takes a few minutes:</p>
<p>https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L90-L94</p>
<p>I can’t help but feel there must still be a nice (or at least much faster) way to do this using the built-in tools from Actions.</p></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/super-linter/issues/1167</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/view_component/issues/1151</link>
	<description><![CDATA[ <pre><h2 id="feature-request">Feature request</h2>
<p>As a developer reading the ViewComponent documentation, it is unclear whether there are unreleased features in the docs.</p>
<h3 id="motivation">Motivation</h3>
<p>We’ve seen some issues here and there of folks being mislead by our documentation when unreleased changes were described in the docs.</p>
<h3 id="proposed-solution">Proposed solution</h3>
<p>I could see us solving this a couple ways. We could only publish the docs when a release is cut, we could version the docs (see https://glebbahmutov.com/blog/versioned-doc-pages/, or perhaps we could start with a disclaimer that the docs are for the <code>main</code> branch.</p></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/view_component/issues/1093</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/view_component/issues/1064</link>
	<description><![CDATA[ <pre><h2 id="feature-request">Feature request</h2>
<p>Hello, how could this be done? In the javascript documentation the configuration needed to use webpack is indicated, but I am interested in using stimulus using importmap and sprockets, as it will be in rails 7 by default, using the asset pipeline.</p>
<p>Could this be added to the documentation?</p>
<p>Thanks!</p>
<h3 id="motivation">Motivation</h3>
<!-- What would you like to do with this feature? Can you provide
context or references to similar behavior in other libraries? -->
<p>Motivated by those post by DHH:</p>
<ul>
<li><a href="https://world.hey.com/dhh/modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755">Modern web apps without JavaScript bundling or transpiling</a></li>
<li><a href="https://world.hey.com/dhh/rails-7-will-have-three-great-answers-to-javascript-in-2021-8d68191b">Rails 7 will have three great answers to JavaScript in 2021+</a></li>
</ul></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/view_component/issues/1048</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/view_component/issues/904</link>
	<description><![CDATA[ <pre><h3 id="problem-statement">Problem statement</h3>
<blockquote>
<p>How have y’all at Github approached testing view components that have an interactive component to them? We’ve mainly been unit testing each view component we add and then writing feature specs for browser interactions, but I’m wondering if there is a better way to approach it - RailsConf Q&amp;A</p>
</blockquote>
<h3 id="proposed-solution">Proposed solution</h3>
<p>In Primer ViewComponents, we use system tests powered by cuprite and ViewComponent Previews for testing behaviors. As this approach matures, we should aim to move of much of it as possible into ViewComponent.</p></pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/view_component/issues/387</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>

<item>	<title></title>
	<link>https://github.com/github/view_component/issues/234</link>
	<description><![CDATA[ <pre>Content clipped</pre> ]]></description>
</item>


</channel>
</rss>

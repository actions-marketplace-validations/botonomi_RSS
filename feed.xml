<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
<title>Help Wanted</title>
<description>Help Wanted Issues</description>
<link>https://lbonanomi.github.io/workspace/feed.xml</link>
<item>	<title>Help wanted to add more unit tests</title>
	<link>https://github.com/Autodesk/go-awsecs/issues/22</link>
	<description><![CDATA[ <pre></pre> ]]></description>
</item>
<item>	<title>Help wanted to add more unit tests</title>
	<link>https://github.com/Autodesk/go-awsecs/issues/22</link>
	<description><![CDATA[ <pre></pre> ]]></description>
</item>
<item>	<title>WANT_UFE_BUILD scattered throughout build process</title>
	<link>https://github.com/Autodesk/maya-usd/issues/589</link>
	<description><![CDATA[ <pre><p><strong>Describe the issue</strong>
<strong>WANT_UFE_BUILD</strong> can wind up controlling vtable layout and availability of functions.
Currently it’s usage is scattered throughout CMake and headers in mayaUsd, hdMaya, mayaToHydra, AL-usdmaya. Usually as <strong>PRIVATE</strong> sometimes as <strong>PUBLIC</strong> (#583).</p>
<p>Seems better to be held in a spot where all sub-projects consume the value, and anyone building against a distribution can ingest the MACRO properly (i.e. in an installed CMake target).</p></pre> ]]></description>
</item>
<item>	<title>:gh release create: Make the error message more descriptive, if &amp;lt;tag&amp;gt; isn't passed.</title>
	<link>https://github.com/cli/cli/issues/2327</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>When <code>gh release create</code> is run, without any arguments, the output received is: <code>requires at least 1 arg(s), only received 0</code>. This is not helpful to a user who is not aware of the command (until <code>gh release create --help</code>).</p>
<h3 id="proposed-solution">Proposed solution</h3>
<p>Instead of the not-so-useful message, a user can receive a message like: <code>could not create: no tag name provided</code>. This will help to describe the user about the command at command execution time, rather than using <code>gh release create --help</code>.</p></pre> ]]></description>
</item>
<item>	<title>when GITHUB_TOKEN is set, print better messaging during gh auth login</title>
	<link>https://github.com/cli/cli/issues/2304</link>
	<description><![CDATA[ <pre><p>Currently we let a user get through two prompts of <code>gh auth login</code> when GITHUB_TOKEN is set, then unceremoniously tell them that the token is read-only.</p>
<p>We should proactively notice that situation when <code>gh auth login</code> is run and give clear messaging about unsetting the token in order to use the command.</p>
<p>Initially we thought only power users would be using GITHUB_TOKEN as an opt-in choice, making this fine; but in Codespaces GITHUB_TOKEN is being set without users ever knowing about it.﻿</p></pre> ]]></description>
</item>
<item>	<title>support gitflags in gh repo fork</title>
	<link>https://github.com/cli/cli/issues/2236</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>I want to create a fork and then clone it locally shallowly. This is not possible since <code>gh repo fork --clone</code> does not provide any options and does not return the repo name in a clean way.</p>
<h3 id="proposed-solution">Proposed solution</h3>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="ex">gh</span> repo clone -- --depth 1 --single-branch <span class="va">$(</span><span class="ex">gh</span> repo fork --clone=false<span class="va">)</span></span></code></pre></div>
<p>or accept gitflags <a href="https://cli.github.com/manual/gh_repo_clone">like <code>gh repo clone</code> does</a></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="ex">gh</span> repo fork --clone -- --depth 1 --single-branch</span></code></pre></div>
<h2 id="how-will-it-benefit-cli-and-its-users">How will it benefit CLI and its users?</h2>
<p>This speeds up the cloning progress. Adding support for gitflags will also align <code>repo fork</code> with <code>repo clone</code></p></pre> ]]></description>
</item>
<item>	<title>Option to disallow edits from maintainers</title>
	<link>https://github.com/cli/cli/issues/2213</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>I would like to disallow edits by maintainers when creating a PR from the command line. Currently, I have to open the PR in the browser and untick the checkbox ("Allow edits and access to secrets by maintainers"). Correct me if I’m wrong, but I could not find an option in <a href="https://cli.github.com/manual/">the manual</a> or an existing issue.</p>
<h3 id="proposed-solution">Proposed solution</h3>
<p>Add a flag and a config option to untick this checkbox / disallow edits from the terminal, so that users do not have to open the browser.</p>
<h3 id="additional-context">Additional context</h3>
<p>Hub had an issue for this too. At first, the API did not support this, but later a PR got merged (see end of thread): https://github.com/github/hub/issues/1349</p></pre> ]]></description>
</item>
<item>	<title>Display the number of approvals in 'pr status'</title>
	<link>https://github.com/cli/cli/issues/2210</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>My team requires &gt;=2 PR approvals before merging a branch. I’m sure there’s other teams that have some min. requirement for number of approvals as well. My problem is that <code>gh pr status</code> only shows if a PR’s been approved at least once.</p>
<h3 id="proposed-solution">Proposed solution</h3>
<p>I’d love for it to show the number of approvals.</p></pre> ]]></description>
</item>
<item>	<title>support .ssh/config Include directives</title>
	<link>https://github.com/cli/cli/issues/2179</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>This is sort of related to #326 - I use different ssh keys for organizations on github, so I have Host aliases set up in <code>~/.ssh/config.d/org_name</code> files. One of these aliases may look like this:</p>
<pre><code>Host github.com-org_name
    HostName github.com
    User sclem
    IdentityFile ~/.ssh/org_name_key
    IdentitiesOnly yes</code></pre>
<p>git remote will look like: <code>git@github.com-org_name:Org/Repo.git</code></p>
<p>My top level .ssh/config contains some global wildcards and <code>Include ~/.ssh/config.d/*</code>, which is documented in the <code>ssh_config</code> man page.</p>
<p>I perused through the codebase to find that gh cli does in fact read and parse ~/.ssh/config for these Host aliases to resolve the upstream host. This works correctly, however I couldn’t find any documentation on this behavior and it doesn’t support multiple files.</p>
<p>The error seen (after auth, if alias is not in .ssh/config directly):</p>
<pre><code>none of the git remotes configured for this repository point to a known GitHub host. To tell gh about a new GitHub host, please use `gh auth login`</code></pre>
<h3 id="proposed-solution">Proposed solution</h3>
<p>Read all the ssh_config files the user has configured. Workaround for now is to put all hosts into my .ssh/config. This may get tricky, considering <code>man ssh_config</code> supports conditional includes inside a Match/Host block.</p>
<p>Another idea is to support host: github.com in hosts.yml and don’t parse ssh config to try and resolve the remote hostname, instead have hosts.yml "keys" match the remote "domain" directly.</p>
<h3 id="additional-context">Additional context</h3>
<p>Workaround for now is to put everything into <code>.ssh/config</code> directly</p></pre> ]]></description>
</item>
<item>	<title>Support cloning a gist (just like cloning a repo)</title>
	<link>https://github.com/cli/cli/issues/2115</link>
	<description><![CDATA[ <pre><p>In https://github.com/cli/cli/pull/1699#issue-486709880, <span class="citation" data-cites="vilmibm">@vilmibm</span> notes a limitation:</p>
<blockquote>
<p>no affordance for cloning a gist to do more advance editing</p>
</blockquote>
<p>I’d like to be able to clone a gist, just like I can clone a repo. This is all that’s still needed in order to be able to use <code>gh</code> to enumerate and backup/export (clone) all owned gists.</p></pre> ]]></description>
</item>
<item>	<title>Sign `gh.exe` binaries in addition to signing the MSI installer</title>
	<link>https://github.com/cli/cli/issues/2111</link>
	<description><![CDATA[ <pre><p>This would help identify Windows binaries that were officially packaged by us vs. ones that might have been modified/corrupted. Right now, we only do signing with the MSI installer.</p>
<p>Ref. https://github.com/cli/cli/issues/2064
Followup to #148</p></pre> ]]></description>
</item>
<item>	<title>Ask to git init on repo create </title>
	<link>https://github.com/cli/cli/issues/2099</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>If you run <code>gh repo create</code> in a folder that isn’t initialized with git the command fails.</p>
<h3 id="proposed-solution">Proposed solution</h3>
<p>Instead of failing the user would be asked if they want to initialize the current folder a git repo.</p>
<h3 id="additional-context">Additional context</h3>
<p>I would love to take up the implementation of this! The <a href="https://github.com/go-git/go-git">go-git</a> module seems like the easiest way to implement this but it is a big dep. Should we just run an exec command or is there some other way to do it?</p>
<p>p.s. thank you for making this awesome cli :)</p></pre> ]]></description>
</item>
<item>	<title>Letting the user specify the base init dir for the newly created repo</title>
	<link>https://github.com/cli/cli/issues/2077</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>I’m really happy to use <code>gh</code> for my projects and it’s really helping me with increasing GitHub processes speed. But when I use <code>gh repo create</code>, it initializes the created repository in the current directory and I cannot customize the target base folder. If I’m in another directory than the actual folder I would like to create the project in, then I have to switch the directory and then use <code>gh</code>.</p>
<pre><code>▶ gh repo create organization/foo --confirm --private
✓ Created repository organization/foo on GitHub
Initialized empty Git repository in ./foo/.git/
✓ Initialized repository in &#39;./foo/&#39;</code></pre>
<p>In this case, I would like to init the repo in another folder, not in the current one.</p>
<h3 id="proposed-solution">Proposed solution</h3>
<p>To be able to achieve this issue, we can add a new flag for <code>gh repo create</code> and let the user specify the base init dir for the newly created repo. So they can initialize the repo in whatever directory they want.</p>
<pre><code>▶ gh repo create organization/foo --confirm --private --init-base-dir=/dev/repo/target
✓ Created repository organization/foo on GitHub
Initialized empty Git repository in /dev/repo/target/foo/.git/
✓ Initialized repository in &#39;/dev/repo/target/foo/&#39;</code></pre>
<h3 id="additional-context">Additional context</h3>
<p>I can happily send a pull request for this feature if you would agree with the feature.</p></pre> ]]></description>
</item>
<item>	<title>Supply --web to gist create to streamline create &amp; view process</title>
	<link>https://github.com/cli/cli/issues/2071</link>
	<description><![CDATA[ <pre><p>I would like to able to able to supply the <code>--web</code> flag, or something similar, potentially a configuration option, to gist create options.</p>
<p>for example: <code>gh gist create [&lt;filename&gt;... | -] --web</code></p>
<p>This would then open the created gist in the browser.</p>
<p>Currently it requires you to copy the gist id and supply it in <code>gh gist view</code>.</p></pre> ]]></description>
</item>
<item>	<title>Columns truncated when printing nontty table</title>
	<link>https://github.com/cli/cli/issues/2042</link>
	<description><![CDATA[ <pre><p>The table printer is truncating columns (at least in <code>issue list</code>) to meet the terminal width even
when invoked non-interactively. This breaks grep-based scripting for, say, long lists of labels.</p></pre> ]]></description>
</item>
<item>	<title>Render a local markdown file</title>
	<link>https://github.com/cli/cli/issues/2007</link>
	<description><![CDATA[ <pre><p>Let’s suppose that the new command is going to be called <code>gh render</code> (suggestions welcome). I imagine that it could work like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a>$ <span class="ex">gh</span> render README.md</span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="co"># or, by taking in standard input</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>$ <span class="fu">cat</span> README.md <span class="kw">|</span> <span class="ex">gh</span> render </span></code></pre></div>
<p>Original issue:</p>
<h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>currently the <code>gh repo view</code> only shows the remote content, so if I want to show my local changes like:
* current recently created branch
* or an existing branch with some changes in the Readme.md file</p>
<p>I’d have to push the changes before in order to see them</p>
<h3 id="proposed-solution">Proposed solution</h3>
<p>Add a new flag like <code>--local</code> or a dot arg
1. <code>gh repo view --local</code>
2. <code>gh repo view .</code></p>
<p>since the dot argument is widely known as my current location (aka working flow, branch) locally, I think it’s a better option than an extra flag</p>
<h3 id="additional-context">Additional context</h3>
<p>the reason of showing the local readme instead of the remote is in order to see my changes in the readme file before publish them, and how they’d look through the <code>repo view</code> command.</p>
<p>note: I had started an implementation <a href="https://github.com/cli/cli/pull/1986">here</a> although it does quite more than just showing the local changes (may refactor it), but the specific build are failing as well</p></pre> ]]></description>
</item>
<item>	<title>Store gh config in 
<item>	<title>[Feature] Run from Windows Explorer Address Bar</title>
	<link>https://github.com/cli/cli/issues/1919</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>On windows when <code>Git for Windows</code> with <code>Git Bash</code> is installed, I can run git commands directly from the Windows Explorer Address Bar, for example like this:
<img src="https://user-images.githubusercontent.com/18656830/94027461-2504ba80-fdbb-11ea-8e25-6c4bcad2a75f.png" alt="grafik" /></p>
<p>It would be cool if the GitHub CLI could be run the same way:
<img src="https://user-images.githubusercontent.com/18656830/94027555-41085c00-fdbb-11ea-841d-b9967f16fc51.png" alt="grafik" /></p>
<p>Right now if I type in this command, a cmd window with toe following message appears:</p>
<pre><code>This is a command line tool.

You need to open cmd.exe and run it from there.</code></pre>
<h3 id="proposed-solution">Proposed solution</h3>
<p>Access will be faster as no terminal / cmd window has to be opened.</p></pre> ]]></description>
</item>
<item>	<title>Debian packaging-source (deb-src) not available</title>
	<link>https://github.com/cli/cli/issues/1916</link>
	<description><![CDATA[ <pre><h3 id="describe-the-bug">Describe the bug</h3>
<p>There are (apparently) no debian <em>source</em> packages in the repo. When uncommenting the commented "deb-src" line (which is injected into the apt sources.list alongside the "deb" line) and re-running apt update it throws a warning about the missing source-packages Release file.</p>
<pre><code># gh --version
gh version 1.0.0 (2020-09-16)
https://github.com/cli/cli/releases/tag/v1.0.0
</code></pre>
<h3 id="steps-to-reproduce-the-behavior">Steps to reproduce the behavior</h3>
<ol type="1">
<li>Uncomment the deb-src line for cli.github.com in /etc/apt/sources.list (keeping the deb line too)</li>
</ol>
<pre><code>deb https://cli.github.com/packages unstable main
## change the following line...
# deb-src https://cli.github.com/packages unstable main
## to this...
deb-src https://cli.github.com/packages unstable main</code></pre>
<ol start="2" type="1">
<li>Run "apt update"</li>
<li>See warning at the end of the output</li>
</ol>
<h3 id="expected-vs-actual-behavior">Expected vs actual behavior</h3>
<p>Although access to the source itself is possible through the git repo, once the debian package is able to be built reproducibly (if it isn’t already?) then having access to the source-packages allows external users to download those and build them to compare checksums and <em>prove</em> the binary packages correspond to the source (no backdoors, etc). Also, searching through alternate branches I haven’t been able to find the source of the debian-packaging files anyway (the "/debian" subdir) so the <em>packaging</em> still seems essentially "not yet open-source" (unless it is somewhere and I just couldn’t find it).</p>
<h3 id="logs">Logs</h3>
<pre><code>...
...
Hit:5 https://cli.github.com/packages unstable InRelease                                                                                                  
...
...
Fetched 6,594 B in 2s (3,618 B/s)
Reading package lists... Done
Building dependency tree       
Reading state information... Done
1656 packages can be upgraded. Run &#39;apt list --upgradable&#39; to see them.
W: Skipping acquire of configured file &#39;main/source/Sources&#39; as repository &#39;https://cli.github.com/packages unstable InRelease&#39; does not seem to provide it (sources.list entry misspelt?)</code></pre></pre> ]]></description>
</item>
<item>	<title>Ability to initialize repo with .gitignore and license</title>
	<link>https://github.com/cli/cli/issues/1907</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>Since we can now do everything we can from CLI, it makes no sense to open a browser for any tasks, no matter how simple it is.
Right now we cant use default templates for <code>.gitignore</code> or <code>LICENSE</code>, since there is no such option. We have to download from internet or use from a previous one, which is quite tedious or boring or straight up a bad practice in some cases. Forgetting to do so will cause unnecessary cluttering in the repo too.</p>
<h3 id="proposed-solution">Proposed solution</h3>
<p>Providing a command which will automatically initialize the repo with <code>.gitignore</code> or <code>LICENSE</code> like how its done with a check box in the browser or GitHub Desktop, saving everyone some time and also easing the workflow</p></pre> ]]></description>
</item>
<item>	<title>gh gist delete command request</title>
	<link>https://github.com/cli/cli/issues/1832</link>
	<description><![CDATA[ <pre><h3 id="the-feature">The feature</h3>
<p>I do not think right now the GitHub CLI has ability to delete gists</p>
<p>I will be better if it can delete it via <code>gh gist delete &lt;id&gt;</code></p>
<pre class="cmd"><code>$ gh gist delete --help
Delete one of your gists

USAGE
    gh gist delete {&lt;gist ID&gt; | &lt;gist URL&gt;} [flags]

FLAGS
    -f, --filename string      a specific filename to delete

INHERITED FLAGS
   --help    Show help for command</code></pre></pre> ]]></description>
</item>
<item>	<title>Update messaging when `gh pr check` run on repo w/o CI</title>
	<link>https://github.com/cli/cli/issues/1818</link>
	<description><![CDATA[ <pre><p>When running this <code>gh pr checks [branch] -R [owner/repo]</code> command and there is no pull request but no CI, I get this:</p>
<p><code>no open pull requests found for branch \"JJJ\"</code></p>
<p>However, when running the same command on a different branch and there is a pull request but no CI, nothing is returned.</p>
<p>In both cases, I think it would be more accurate to say something like "no CI checks are set up for this repository".</p></pre> ]]></description>
</item>
<item>	<title>Document where authentication credentials are stored</title>
	<link>https://github.com/cli/cli/issues/1773</link>
	<description><![CDATA[ <pre><h3 id="describe-the-feature-or-problem-youd-like-to-solve">Describe the feature or problem you’d like to solve</h3>
<p>I can’t find any information on the website or in the CLI help command about where authentication information is stored.</p>
<h3 id="proposed-solution">Proposed solution</h3>
<p>Document where GH CLI stores authentication credentials. Also explain the relationship of this with existing GitHub credentials you may have on your system, like an SSH key or git https credentials in the keychain.</p>
<p>This helps the user understand the security and practical implications of logging in to the CLI.</p></pre> ]]></description>
</item>

</channel>
</rss>
